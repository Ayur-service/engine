version: '3.8'
services:
  auth_db:
    container_name: 'auth_db'
    image: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    env_file:
      - "auth/.env"
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - ayur_auth

  auth: # auth service container
    container_name: 'auth'
    build:
      dockerfile: auth/Dockerfile
    env_file:
      - "auth/.env"
    restart: always
    networks:
      - ayur
      - ayur_auth
    depends_on:
      - auth_db

  hospital_db:
    container_name: 'hospital_db'
    image: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - hospital_db:/var/lib/postgresql/data
    env_file:
      - hospital/.env
    ports:
      - "5432:5432"
    restart: always
    networks:
      - ayur_hospital
    depends_on:
      - auth

  hospital:
    container_name: 'hospital'
    build:
      dockerfile: hospital/Dockerfile
    env_file:
      - hsopital/.env
    restart: always
    networks:
      - ayur_hospital
      - ayur
    depends_on:
      - hospital_db

  checkup_db:
    container_name: 'checkup_db'
    image: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - checkup_db:/var/lib/postgresql/data
    env_file:
      - checkups/.env
    ports:
      - "5432:5432"
    restart: always
    networks:
      - ayur_checkup
    depends_on:
      - auth

  checkup:
    container_name: 'checkup'
    build:
      dockerfile: checkup/Dockerfile
    env_file:
      - checkups/.env
    restart: always
    networks:
      - ayur_checkup
      - ayur
    depends_on:
      - checkup_db

  user_data_db:
    container_name: 'user_data_db'
    image: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    env_file:
      - user/.env
    volumes:
      - user_data_db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - ayur_user_data
    depends_on:
      - auth

  user_data:
    container_name: 'user_data'
    build:
      dockerfile: user_data/Dockerfile
    env_file:
      - user/.env
    restart: always
    networks:
      - ayur_user_data
      - ayur
    depends_on:
      - user_data_db

  nginx:
    container_name: nginx
    image: nginx
    ports:
      - "80:80"
    environment:
      - HOST=${HOST}

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/default.conf
      - ./nginx/run.sh:/run.sh
    command: "/bin/sh -c 'chmod +x ./run.sh; ./run.sh; nginx -s reload; done & nginx -g \"daemon off;\"'"
    restart: always
    depends_on:
      - auth
      - user_data
      - hospital
      - checkup


volumes:
  ayur_db:
  hospital_db:
  checkup_db:
  user_data_db:

networks:
  ayur:  # network to connect all ayur services, so nginx can redirect traffic
    driver: bridge
  ayur_auth:
    driver: bridge
  ayur_user_data:
    driver: bridge
  ayur_hospital:
    driver: bridge
  ayur_checkup:
    driver: bridge